// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fileservice.proto

package pkg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Metadata struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_fileservice_4433e0df630babed, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (dst *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(dst, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The request message containing the user's name.
type Chunk struct {
	Data                 []byte    `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Meta                 *Metadata `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_fileservice_4433e0df630babed, []int{1}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (dst *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(dst, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Chunk) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

type UploadResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResponse) Reset()         { *m = UploadResponse{} }
func (m *UploadResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()    {}
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fileservice_4433e0df630babed, []int{2}
}
func (m *UploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResponse.Unmarshal(m, b)
}
func (m *UploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResponse.Marshal(b, m, deterministic)
}
func (dst *UploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResponse.Merge(dst, src)
}
func (m *UploadResponse) XXX_Size() int {
	return xxx_messageInfo_UploadResponse.Size(m)
}
func (m *UploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Metadata)(nil), "pkg.Metadata")
	proto.RegisterType((*Chunk)(nil), "pkg.Chunk")
	proto.RegisterType((*UploadResponse)(nil), "pkg.UploadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileClient interface {
	Upload(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*UploadResponse, error)
	UploadStream(ctx context.Context, opts ...grpc.CallOption) (File_UploadStreamClient, error)
}

type fileClient struct {
	cc *grpc.ClientConn
}

func NewFileClient(cc *grpc.ClientConn) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) Upload(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/pkg.File/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) UploadStream(ctx context.Context, opts ...grpc.CallOption) (File_UploadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_File_serviceDesc.Streams[0], "/pkg.File/UploadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploadStreamClient{stream}
	return x, nil
}

type File_UploadStreamClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type fileUploadStreamClient struct {
	grpc.ClientStream
}

func (x *fileUploadStreamClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploadStreamClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServer is the server API for File service.
type FileServer interface {
	Upload(context.Context, *Chunk) (*UploadResponse, error)
	UploadStream(File_UploadStreamServer) error
}

func RegisterFileServer(s *grpc.Server, srv FileServer) {
	s.RegisterService(&_File_serviceDesc, srv)
}

func _File_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.File/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).Upload(ctx, req.(*Chunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_UploadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).UploadStream(&fileUploadStreamServer{stream})
}

type File_UploadStreamServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type fileUploadStreamServer struct {
	grpc.ServerStream
}

func (x *fileUploadStreamServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploadStreamServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _File_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _File_Upload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadStream",
			Handler:       _File_UploadStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fileservice.proto",
}

func init() { proto.RegisterFile("fileservice.proto", fileDescriptor_fileservice_4433e0df630babed) }

var fileDescriptor_fileservice_4433e0df630babed = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xcb, 0xcc, 0x49,
	0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e,
	0xc8, 0x4e, 0x57, 0x92, 0xe3, 0xe2, 0xf0, 0x4d, 0x2d, 0x49, 0x4c, 0x49, 0x2c, 0x49, 0x14, 0x12,
	0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95,
	0xec, 0xb8, 0x58, 0x9d, 0x33, 0x4a, 0xf3, 0xb2, 0x41, 0x92, 0x20, 0x45, 0x60, 0x49, 0x9e, 0x20,
	0x30, 0x5b, 0x48, 0x91, 0x8b, 0x25, 0x37, 0xb5, 0x24, 0x51, 0x82, 0x49, 0x81, 0x51, 0x83, 0xdb,
	0x88, 0x57, 0xaf, 0x20, 0x3b, 0x5d, 0x0f, 0x66, 0x5a, 0x10, 0x58, 0x4a, 0x49, 0x80, 0x8b, 0x2f,
	0xb4, 0x20, 0x27, 0x3f, 0x31, 0x25, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0xd5, 0x28, 0x83,
	0x8b, 0xc5, 0x2d, 0x33, 0x27, 0x55, 0x48, 0x9b, 0x8b, 0x0d, 0x22, 0x23, 0xc4, 0x05, 0xd6, 0x08,
	0xb6, 0x46, 0x4a, 0x18, 0xcc, 0x46, 0xd5, 0xa2, 0xc4, 0x20, 0x64, 0xcc, 0xc5, 0x03, 0x11, 0x0b,
	0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x25, 0x42, 0x8b, 0x06, 0x63, 0x12, 0x1b, 0xd8, 0x9f, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x70, 0x89, 0xdd, 0xfc, 0x00, 0x00, 0x00,
}
